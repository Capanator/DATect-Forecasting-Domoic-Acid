# Single-stage Dockerfile for DATect Google Cloud deployment
# Uses locally pre-computed cache (no cloud computation)

FROM python:3.11-slim as production

LABEL maintainer="DATect Team"
LABEL description="DATect - Domoic Acid Forecasting System (Production)"

# Set working directory
WORKDIR /app

# Install system dependencies including Node.js
RUN apt-get update && apt-get install -y \
    curl \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY backend ./backend
COPY forecasting ./forecasting
COPY data ./data
COPY config.py .

# Copy locally pre-computed cache
COPY cache ./cache

# Verify cache was copied
RUN ls -la ./cache/ && \
    echo "ðŸ“‹ Local cache manifest:" && \
    cat ./cache/manifest.json

# Build frontend with increased memory
COPY frontend/package*.json ./frontend/
RUN cd frontend && npm install

COPY frontend ./frontend
RUN cd frontend && \
    NODE_OPTIONS="--max_old_space_size=4096" npm run build && \
    echo "âœ… Frontend built successfully"

# Create non-root user for security
RUN groupadd -r datect && useradd -r -g datect datect

# Set ownership and permissions
RUN chown -R datect:datect /app
RUN chmod -R 555 ./cache && \
    echo "ðŸ”’ Cache directory made read-only"

USER datect

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8080/health', timeout=5)"

# Expose port
EXPOSE 8080

# Environment variables
ENV PORT=8080
ENV PYTHONPATH=/app
ENV CACHE_DIR=/app/cache
ENV NODE_ENV=production

# Start command - serve frontend via FastAPI
CMD ["python", "-m", "uvicorn", "backend.api:app", "--host", "0.0.0.0", "--port", "8080"]